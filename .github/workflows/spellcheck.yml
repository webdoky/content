name: spellcheck
on: [pull_request]
jobs:
  prepare-translation:
    outputs:
      translation: ${{ steps.translation-changes.outputs.translation }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check translation
        # Check there is only one translation change
        # If there are more than one, the workflow will fail
        id: translation-changes
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "$changed_files"
          if [ -z "$changed_files" ]; then
            echo "No files changed"
          else
            translation_files=$(echo "$changed_files" | grep -E ".*\.md")
            echo "$translation_files"
            if [ -z "$translation_files" ]; then
              echo "No translation files changed"
            else
              if [ $(echo "$translation_files" | wc -l) -gt 1 ]; then
                echo "More than one translation file changed"
              else
                echo "translation=$translation_files" >> $GITHUB_OUTPUT
              fi
            fi
          fi
  languagetool:
    if: ${{ needs.prepare-translation.outputs.translation != '' }}
    name: runner / languagetool
    needs: [prepare-translation]
    outputs:
      result: ${{ steps.check-spelling.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Remove code blocks
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          sed -i '/```/,/```/d' $file
      # Strip all macros
      - id: strip-macros
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          # Remove all macros with no arguments
          sed -i 's/{{[a-zA-Z_-]*}}//' $file
          # Replace macros with one argument
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\))}}/\1/g' $file
          # Replace macros with two arguments
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
          # Replace macros with more than two arguments
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
      # Reduce markdown to plain text
      - run: sudo apt install pandoc -y
      - id: md2txt
        name: Convert markdown to plain text
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          newFileName=$(echo $file | sed 's/\.md/\.txt/')
          pandoc -f markdown -t plain -o $newFileName $file
          echo "translation=$newFileName" >> $GITHUB_OUTPUT
          echo $newFileName
      # Error if translation file is not found
      - if: steps.md2txt.outputs.translation == ''
        name: Check translation is found
        run: echo "No translation file found" && exit 1
      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "8"
      - name: Download LanguageTool
        run: wget -q https://languagetool.org/download/LanguageTool-6.3.zip
      - name: Unzip LanguageTool
        run: unzip -qq LanguageTool-6.3.zip
      - name: Add spelling additions
        run: |
          cat uk_spelling_additions.txt >> ./LanguageTool-6.3/org/languagetool/resource/uk/hunspell/spelling.txt
          cat uk_ignore_additions.txt >> ./LanguageTool-6.3/org/languagetool/resource/uk/hunspell/ignore.txt
      - id: disabled-rules
        name: Determine disabled rules
        run: echo "disabled_rules=$(cat disabled_rules.txt | tr '\n' ',')" >> $GITHUB_OUTPUT
      - id: check-spelling
        name: Check spelling
        run: |
          cd LanguageTool-6.3
          java -jar languagetool-commandline.jar -d ${{steps.disabled-rules.outputs.disabled_rules}} -l uk --json ../${{ steps.md2txt.outputs.translation }} > ../result.json
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "result<<$EOF" >> $GITHUB_OUTPUT
          echo "$(cat ../result.json | jq -r '.matches')" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
  report-spelling:
    if: ${{ needs.languagetool.outputs.result != '[]'  }}
    name: Report spelling
    needs: [languagetool]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install reviewdog
        run: curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s
      - name: Install tmpl
        run: sudo apt install -y tmpl
      - name: Send results
        run: |
          message=$(tmpl -data "${{ needs.languagetool.outputs.result }}" ./langtool.tmpl)
          export REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "$message" | /bin/reviewdog -efm="%A%f:%l:%c: %m" -efm="%C %m" -name="LanguageTool" -level=info
      - name: Exit with error
        run: echo "Spelling errors found" && echo "${{ needs.languagetool.outputs.result }}"" && exit 1
