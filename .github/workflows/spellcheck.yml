name: spellcheck
on: [pull_request]
jobs:
  prepare-translation:
    outputs:
      translation: ${{ steps.translation-changes.outputs.translation }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check translation
        # Check there is only one translation change
        # If there are more than one, the workflow will fail
        id: translation-changes
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "$changed_files"
          if [ -z "$changed_files" ]; then
            echo "No files changed"
          else
            translation_files=$(echo "$changed_files" | grep -E ".*\.md")
            echo "$translation_files"
            if [ -z "$translation_files" ]; then
              echo "No translation files changed"
            else
              if [ $(echo "$translation_files" | wc -l) -gt 1 ]; then
                echo "More than one translation file changed"
              else
                echo "translation=$translation_files" >> $GITHUB_OUTPUT
              fi
            fi
          fi
      # - if: steps.translation-changes.outputs.translation != ''
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: translation
      #     path: ${{ steps.translation-changes.outputs.translation }}
      # # - run: echo "translation=${{ steps.translation-changes.outputs.translation }}" >> $GITHUB_OUTPUT
  languagetool:
    name: runner / languagetool
    needs: [prepare-translation]
    if: ${{ needs.prepare-translation.outputs.translation != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove code blocks
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          sed -i '/```/,/```/d' $file
      # Strip all macros
      # - id: strip-macros
      #   run: |
      #     file=${{ needs.prepare-translation.outputs.translation }}
      #     # Remove all macros with no arguments
      #     sed -i 's/{{[a-zA-Z_-]*}}//' $file
      #     # Replace macros with one argument
      #     sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\))}}/\1/g' $file
      #     # Replace macros with two arguments
      #     sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
      #     # Replace macros with more than two arguments
      #     sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
      # Reduce markdown to plain text
      - run: sudo apt install pandoc -y
      - id: md2txt
        name: Convert markdown to plain text
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          newFileName=$(echo $file | sed 's/\.md/\.txt/')
          pandoc -f markdown -t plain -o $newFileName $file
          echo "translation=$newFileName" >> $GITHUB_OUTPUT
          echo $newFileName
      # Error if translation file is not found
      - if: steps.md2txt.outputs.translation == ''
        name: Check translation is found
        run: echo "No translation file found" && exit 1
      # Check if the translation file exists
      - name: Check translation exists
        run: if test -f ${{ steps.md2txt.outputs.translation }}; then echo "File exists."; else exit 1; fi
      - uses: reviewdog/action-languagetool@master
        with:
          disabled_rules: "NEVIDYEMNYI,UK_SIMPLE_REPLACE_SOFT,WHITESPACE_RULE"
          # github_token: ${{ secrets.github_token }}
          language: uk
          level: info
          patterns: "files/**/*.txt"
