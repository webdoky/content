name: spellcheck
on: [pull_request]
jobs:
  prepare-translation:
    outputs:
      translation: ${{ steps.translation-changes.outputs.translation }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check translation
        # Check there is only one translation change
        # If there are more than one, the workflow will fail
        id: translation-changes
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "$changed_files"
          if [ -z "$changed_files" ]; then
            echo "No files changed"
          else
            translation_files=$(echo "$changed_files" | grep -E ".*\.md")
            echo "$translation_files"
            if [ -z "$translation_files" ]; then
              echo "No translation files changed"
            else
              if [ $(echo "$translation_files" | wc -l) -gt 1 ]; then
                echo "More than one translation file changed"
              else
                echo "translation=$translation_files" >> $GITHUB_OUTPUT
              fi
            fi
          fi
  languagetool:
    if: ${{ needs.prepare-translation.outputs.translation != '' }}
    name: runner / languagetool
    needs: [prepare-translation]
    outputs:
      has_matches: ${{ steps.check-spelling.outputs.has_matches }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Remove code blocks
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          sed -i '/```/,/```/d' $file
      # Strip all macros
      - id: strip-macros
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          # Remove all macros with no arguments
          sed -i 's/{{[a-zA-Z_-]*}}//' $file
          # Replace macros with one argument
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\))}}/\1/g' $file
          # Replace macros with two arguments
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
          # Replace macros with more than two arguments
          sed -i 's/{{[[:alnum:]_-]*(\("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\), \("[[:alnum:]_-]*"\))}}/\2/g' $file
      # Reduce markdown to plain text
      - run: sudo apt install pandoc -y
      - id: md2txt
        name: Convert markdown to plain text
        run: |
          file=${{ needs.prepare-translation.outputs.translation }}
          newFileName=$(echo $file | sed 's/\.md/\.txt/')
          pandoc -f markdown -t plain -o $newFileName $file
          echo "translation=$newFileName" >> $GITHUB_OUTPUT
          echo $newFileName
      # Error if translation file is not found
      - if: steps.md2txt.outputs.translation == ''
        name: Check translation is found
        run: echo "No translation file found" && exit 1
      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "8"
      - name: Download LanguageTool
        run: wget -q https://languagetool.org/download/LanguageTool-6.3.zip
      - name: Unzip LanguageTool
        run: unzip -qq LanguageTool-6.3.zip
      - name: Add spelling additions
        run: |
          cat uk_spelling_additions.txt >> ./LanguageTool-6.3/org/languagetool/resource/uk/hunspell/spelling.txt
          cat uk_ignore_additions.txt >> ./LanguageTool-6.3/org/languagetool/resource/uk/hunspell/ignore.txt
      - id: disabled-rules
        name: Determine disabled rules
        run: echo "disabled_rules=$(cat disabled_rules.txt | tr '\n' ',')" >> $GITHUB_OUTPUT
      - id: check-spelling
        name: Check spelling
        run: |
          cd LanguageTool-6.3
          java -jar languagetool-commandline.jar -d ${{steps.disabled-rules.outputs.disabled_rules}} -l uk --json ../${{ steps.md2txt.outputs.translation }} > ../result.json
          matches=$(cat ../result.json | jq '.matches')
          # Check if matches equal []
          echo "has_matches=$(if [ "$matches" == "[]" ]; then echo "false"; else echo "true"; fi)" >> $GITHUB_OUTPUT
      - name: Upload result.json
        uses: actions/upload-artifact@v3
        with:
          name: result
          path: result.json
  report-spelling:
    if: ${{ needs.languagetool.outputs.has_matches != 'false'  }}
    name: Report spelling
    needs: [languagetool]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - name: Install yq
      #   run: |
      #     BINARY=yq_linux_amd64
      #     VERSION=v4.40.2
      #     mkdir -p ./bin
      #     wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O ./bin/yq &&\
      #     chmod +x ./bin/yq
      - uses: actions/download-artifact@v3
        with:
          name: result
          path: .
      # - name: Convert result into YAML
      #   run: |
      #     cat result.json
      #     ./bin/yq -P -o=yml result.json > result.yml
      - name: Install Mustache
        run: |
          GO_MUSTACHE_VERSION=1.4.0
          mkdir -p ./bin
          curl -s -L -o /tmp/mustache.tgz https://github.com/cbroglie/mustache/releases/download/v${GO_MUSTACHE_VERSION}/mustache_${GO_MUSTACHE_VERSION}_linux_amd64.tar.gz
          tar xvf /tmp/mustache.tgz -C ./bin
      - id: create-message
        name: Create message
        run: |
          echo "message=$(./bin/mustache result.json langtool.mustache)" >> $GITHUB_OUTPUT
      - uses: reviewdog/action-setup@v1
      - name: Send results
        run: |
          export REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "$${{ steps.create-message.outputs.message }}" | reviewdog -efm="%A%f:%l:%c: %m" -efm="%C %m" -reporter=github-pr-review -name="LanguageTool" -level=info
      - name: Exit with error
        run: echo "Spelling errors found" && cat result.json && exit 1
